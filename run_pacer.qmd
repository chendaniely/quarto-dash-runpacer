---
title: "Pace Calculator"
author: "Amateur Runner"
format: dashboard
server: shiny
jupyter: python3
---

```{python}
import asyncio
import math

import numpy as np
import pandas as pd
import plotnine as p9
from plotnine import ggplot, aes, geom_line, geom_point
from plotnine.themes import theme_xkcd
import seaborn as sns
from shiny import render, reactive, ui
from shiny.session import get_current_session # session download hack

import display
import conversions
import parse
import convert
import generate

pace_times_vec = np.vectorize(convert.pace_times)
parse_distance_text_vec = np.vectorize(parse.parse_distance_text)
km_mile_distances_vec = np.vectorize(conversions.km_mile_distances)
input_time_seconds_vec = np.vectorize(convert.input_time_seconds)

```


```{python}
reference_dist_default = [
    "400m",
    "1km",
    "1mi",
    "5km",
    "8km",
    "10km",
    "10mi",
    "half",
    "marathon",
]

reference_dist_ultra = [
    "400m",
    "1km",
    "1mi",
    "5km",
    "8km",
    "10km",
    "10mi",
    "half",
    "marathon",
    "50km",
    "50mi",
    "100km",
    "100mi",
]

reference_dist_intervals = [
    "200m",
    "400m",
    "600m",
    "800m",
    "1000m",
    "1200m",
    "1400m",
    "1600m",
    "1mi",
    "2000m",
]
```


# {.sidebar}

Reference Times and Distances for interactive tables.

<!--
Put a time and distance below and we'll calculate the time for each of the distances.
The "1km" and "1mi" columns are usually what people refer to as a "pace".
-->

```{python}
ui.input_text(id="SHY_REFERENCE_TIME", label="Time (hh:mm:ss or mm:ss):", value="6:00", placeholder="00:06:00")
ui.input_text(id="SHY_REFERENCE_DIST", label="Distance:", value="1km", placeholder="1km")
ui.input_slider(id="SHY_TIME_RANGE", label="Time Range (Seconds):", min=-300, max=300, value=[-30, 30], step=1)
ui.input_text(id="SHY_RANGE_BY", label="By (Seconds):", value="1", placeholder="1")

ui.output_text_verbatim("SHY_REFERENCE_TIME")
ui.output_text_verbatim("SHY_REFERENCE_DIST")

ui.download_button(id="download_df_range", label="Download Pace Table")
```

# Paces (interactive)

## Row {height='167px'}

```{python}
@reactive.Calc
def shy_df_reference():
    data = (
        pd.DataFrame(index=shy_set_reference_distances())
        .assign(Time=lambda df_: pace_times_vec(input.SHY_REFERENCE_TIME(), input.SHY_REFERENCE_DIST(), df_.index))
    )
    return data.T.reset_index(names='Distances')
```

```{python}
#| title: Reference Time + Distance

@render.data_frame
def view_single_pace():
    return render.DataTable(shy_df_reference())
```

## Row {height=100%}

```{python}
#| title: +/- Reference
def highlight_row(x, reference_time, color='yellow'):
    reference_time_display = display.display_seconds(convert.input_time_seconds(reference_time, verbose=False))
    # Define an empty Series with the same index as the DataFrame
    color = f'background-color: {color}'
    df_color = pd.Series('', index=x.index)

    df_color.loc[x.index == reference_time_display] = color

    return df_color

@reactive.Calc
def shy_df_range():
    data = pd.DataFrame(
      index=map(
        display.display_seconds,
        generate.generate_reference_range(
          input_time=input.SHY_REFERENCE_TIME(),
          range_faster=int(input.SHY_TIME_RANGE()[0]),
          range_slower=int(input.SHY_TIME_RANGE()[1]),
          by=int(input.SHY_RANGE_BY())
        )
      ),
      columns=shy_set_reference_distances()
    )

    data = data.apply(
      lambda col_: pace_times_vec(col_.index, input.SHY_REFERENCE_DIST(), col_.name)
    )

    return data

@render.data_frame
def view_range_table():
    #styled_df = shy_df_range().style.apply(highlight_row, reference_time = input.SHY_REFERENCE_TIME(), axis='rows')
    #return styled_df
    return render.DataTable(shy_df_range(), height='100%')


session = get_current_session()
if session is None:
    class MockSession:
        def download(self, filename = ""):
            return lambda x: None

    session = MockSession()

@session.download(filename=lambda: f"paces.csv")
async def download_df_range():
    await asyncio.sleep(0.25)
    yield shy_df_range().to_csv()
```

# Paces (static)

## Row {height='167px'}

```{python}
REFERENCE_TIME = "6:00"
REFERENCE_DIST = "1km"

REFERENCE_DISTANCES = [
    "400m",
    "1km",
    "1mi",
    "5km",
    "8km",
    "10km",
    "10mi",
    "half",
    "marathon",
    "50km",
    "50mi",
    "100km",
    "100mi",
]
```

```{python}
# Define the styling function
def highlight_row(x, color='yellow', reference_time=REFERENCE_TIME):
    reference_time_display = display.display_seconds(convert.input_time_seconds(reference_time, verbose=False))
    # Define an empty Series with the same index as the DataFrame
    color = f'background-color: {color}'
    df_color = pd.Series('', index=x.index)

    df_color.loc[x.index == reference_time_display] = color

    return df_color
```

```{python}
df_reference = (
  pd.DataFrame(index=REFERENCE_DISTANCES)
  .assign(Time=lambda df_: pace_times_vec(REFERENCE_TIME, REFERENCE_DIST, df_.index))
)
```


```{python}
#| title: Reference Time + Distance
df_reference.T.reset_index(names='Distance')
```


## Row

```{python}
#| title: +/- 30 Seconds Reference

# Define the styling function
def highlight_row(x, color='yellow', reference_time=REFERENCE_TIME):
    reference_time_display = display.display_seconds(convert.input_time_seconds(reference_time, verbose=False))
    # Define an empty Series with the same index as the DataFrame
    color = f'background-color: {color}'
    df_color = pd.Series('', index=x.index)

    df_color.loc[x.index == reference_time_display] = color

    return df_color


df_range = pd.DataFrame(
  index=map(display.display_seconds, generate.generate_reference_range(REFERENCE_TIME)),
  columns=REFERENCE_DISTANCES
)

df_range = df_range.apply(
  lambda col_: pace_times_vec(col_.index, REFERENCE_DIST, col_.name)
)

styled_df = df_range.style.apply(highlight_row, axis='rows')
styled_df # <class 'pandas.io.formats.style.Styler'> object type()
```

# Pace Comparison

## column {.flow width='25%'}

```{python}
#| title: Race Times

ui.input_text(id="race_mile", label="Mile")
ui.input_text(id="race_5k", label="5km")
ui.input_text(id="race_10k", label="10km")
ui.input_text(id="race_half", label="Half Marathon")
ui.input_text(id="race_marathon", label="Marathon")
```


```{python}
#| height: 100%
#| width: 75%
@render.plot
def pace_comparison_plot_plotnine():
  return (
    ggplot(
      data=plot_df(),
      mapping=aes(x="dist_km", y="time_sec", color='who', group='who')
    )
    + geom_point()
    + geom_line()
    # round up to nearest 100
    + p9.ylim(0, int(math.ceil(plot_df()["time_sec"].max() / 100) * 100))
    + p9.xlab("Distance (km)")
    + p9.ylab("Time (seconds)")
    + p9.scale_color_manual(
        name="Times",
        values=["#000000", "#FF0000"]
        )
    + theme_xkcd()
  )
```

```{python}
@reactive.Calc
def user_race_paces():
  user_race_df = pd.DataFrame({
    "user_distances": ['1mi', '5km', '10km', 'half', 'marathon'],
    "user_times": [
      input.race_mile(),
      input.race_5k(),
      input.race_10k(),
      input.race_half(),
      input.race_marathon()
    ]
  })
  user_race_df['user_times_sec'] = input_time_seconds_vec(user_race_df['user_times'], verbose=False)
  return user_race_df

@reactive.Calc
def pace_comparison():
    plot_dat = shy_df_reference().melt(var_name="distance", value_name="pace_time").drop(0)

    plot_dat['distance_parse'] = parse_distance_text_vec(plot_dat['distance'])
    plot_dat['km_mile'] = km_mile_distances_vec(
      plot_dat['distance_parse'].str.get('distance'),
      plot_dat['distance_parse'].str.get('unit')
    )
    plot_dat["dist_km"] = plot_dat['km_mile'].str.get('km')
    plot_dat["dist_mi"] = plot_dat['km_mile'].str.get('mi')

    plot_dat['pace_time_sec'] = input_time_seconds_vec(plot_dat['pace_time'], verbose=False)

    plot_dat = plot_dat.merge(
      user_race_paces(),
      how='left',
      left_on='distance',
      right_on='user_distances'
    )

    return plot_dat

@reactive.Calc
def plot_df():
  df = pace_comparison()
  df = df[["distance", "dist_km", "dist_mi", "pace_time_sec", "user_times_sec"]]
  df = df.melt(id_vars=["distance", "dist_km", "dist_mi"], var_name="who", value_name="time_sec")
  df = df.dropna()
  df["time_sec"] = pd.to_numeric(df["time_sec"], errors='raise')
  df["dist_km"] = pd.to_numeric(df["dist_km"], errors='raise')
  df["dist_mi"] = pd.to_numeric(df["dist_mi"], errors='raise')

  df["who"] = df["who"].replace({'pace_time_sec': 'Reference Pace Time', 'user_times_sec': 'User Race Time'})

  return df
```

<!-- for debugging the input tables
```{python}
@render.data_frame
def show_pace_comparison():
    return pace_comparison()
```

```{python}
@render.data_frame
def show_user_race_paces():
  return user_race_paces()
```

```{python}
@render.data_frame
def show_plot_df():
  return plot_df()
```
-->

# Setup

## Row {height='80%'}

```{python}
#| title: Reference Distances

ui.input_text_area(
  id="reference_distances_ui",
  label="Reference Distances\n(separate lines):",
  value="\n".join(reference_dist_default),
  height="350px",
  width="200px"
)

ui.input_action_button(id="button_default", label="Default", width='200px')
ui.input_action_button(id="button_ultra", label="Plus Ultra!", width='200px')
ui.input_action_button(id="button_intervals", label="Track Intervals", width='200px')
```

```{python}
@reactive.Calc
def shy_set_reference_distances():
  return input.reference_distances_ui().strip().split("\n")
```

```{python}
@reactive.Effect
@reactive.event(lambda: input.button_default())
def _():
    ui.update_text_area(
      id="reference_distances_ui",
      value="\n".join(reference_dist_default)
    )

@reactive.Effect
@reactive.event(lambda: input.button_ultra())
def _():
    ui.update_text_area(
      id="reference_distances_ui",
      value="\n".join(reference_dist_ultra)
    )

@reactive.Effect
@reactive.event(lambda: input.button_intervals())
def _():
    ui.update_text_area(
      id="reference_distances_ui",
      value="\n".join(reference_dist_intervals)
    )
```

```{python}
@render.data_frame
def _():
  return plot_df()
```

## Row

```{python}
@render.text
def shy_reference_distances():
  values = input.reference_distances_ui().strip().split("\n")
  return ', '.join(values)
```
